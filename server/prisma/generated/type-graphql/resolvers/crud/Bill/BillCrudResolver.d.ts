import type { GraphQLResolveInfo } from "graphql";
import { AggregateBillArgs } from "./args/AggregateBillArgs";
import { CreateManyBillArgs } from "./args/CreateManyBillArgs";
import { CreateOneBillArgs } from "./args/CreateOneBillArgs";
import { DeleteManyBillArgs } from "./args/DeleteManyBillArgs";
import { DeleteOneBillArgs } from "./args/DeleteOneBillArgs";
import { FindFirstBillArgs } from "./args/FindFirstBillArgs";
import { FindFirstBillOrThrowArgs } from "./args/FindFirstBillOrThrowArgs";
import { FindManyBillArgs } from "./args/FindManyBillArgs";
import { FindUniqueBillArgs } from "./args/FindUniqueBillArgs";
import { FindUniqueBillOrThrowArgs } from "./args/FindUniqueBillOrThrowArgs";
import { GroupByBillArgs } from "./args/GroupByBillArgs";
import { UpdateManyBillArgs } from "./args/UpdateManyBillArgs";
import { UpdateOneBillArgs } from "./args/UpdateOneBillArgs";
import { UpsertOneBillArgs } from "./args/UpsertOneBillArgs";
import { Bill } from "../../../models/Bill";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateBill } from "../../outputs/AggregateBill";
import { BillGroupBy } from "../../outputs/BillGroupBy";
export declare class BillCrudResolver {
    aggregateBill(ctx: any, info: GraphQLResolveInfo, args: AggregateBillArgs): Promise<AggregateBill>;
    createManyBill(ctx: any, info: GraphQLResolveInfo, args: CreateManyBillArgs): Promise<AffectedRowsOutput>;
    createOneBill(ctx: any, info: GraphQLResolveInfo, args: CreateOneBillArgs): Promise<Bill>;
    deleteManyBill(ctx: any, info: GraphQLResolveInfo, args: DeleteManyBillArgs): Promise<AffectedRowsOutput>;
    deleteOneBill(ctx: any, info: GraphQLResolveInfo, args: DeleteOneBillArgs): Promise<Bill | null>;
    findFirstBill(ctx: any, info: GraphQLResolveInfo, args: FindFirstBillArgs): Promise<Bill | null>;
    findFirstBillOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstBillOrThrowArgs): Promise<Bill | null>;
    bills(ctx: any, info: GraphQLResolveInfo, args: FindManyBillArgs): Promise<Bill[]>;
    bill(ctx: any, info: GraphQLResolveInfo, args: FindUniqueBillArgs): Promise<Bill | null>;
    getBill(ctx: any, info: GraphQLResolveInfo, args: FindUniqueBillOrThrowArgs): Promise<Bill | null>;
    groupByBill(ctx: any, info: GraphQLResolveInfo, args: GroupByBillArgs): Promise<BillGroupBy[]>;
    updateManyBill(ctx: any, info: GraphQLResolveInfo, args: UpdateManyBillArgs): Promise<AffectedRowsOutput>;
    updateOneBill(ctx: any, info: GraphQLResolveInfo, args: UpdateOneBillArgs): Promise<Bill | null>;
    upsertOneBill(ctx: any, info: GraphQLResolveInfo, args: UpsertOneBillArgs): Promise<Bill>;
}
